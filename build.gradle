buildscript {
  repositories {
    jcenter()
    mavenLocal()
  }
  dependencies {
    classpath 'com.episode6.hackit.deployable:deployable:0.2.5-SNAPSHOT'
  }
}

group = "com.episode6.hackit.gdmc"
version = "0.1.13-SNAPSHOT"

wrapper {
  gradleVersion = "6.5"
  distributionType = "all"
}

repositories {
  jcenter()
  google()
  mavenLocal()
}

apply plugin: 'groovy'
apply plugin: 'com.episode6.hackit.deployable.gradle-plugin'
apply plugin: com.episode6.hackit.gdmc.plugin.GdmcPlugin

// The plugin source code lives in 'buildSrc' so that we may apply it to ourselves to resolve test dependencies
sourceSets.main.groovy.srcDirs += 'buildSrc/src/main/groovy'

configurations {
  // A place for dependencies that must be placed in the pluginClasspath for testing
  // but do not need to be compile dependencies. (i.e. this is for plugins we need to
  // test for compatibility with)
  alsoUnderTest
}

// apply project dependencies from shared file
apply from: 'project-dependencies.gradle'

dependencies {
  implementation localGroovy()
  implementation gradleApi()

  testImplementation("org.spockframework:spock-core") {
    exclude module: 'groovy-all'
  }
  testImplementation gradleTestKit()
  testImplementation 'com.episode6.hackit.groovykit:gk-files'
  testImplementation 'com.episode6.hackit.groovykit:gk-versions'

  alsoUnderTest 'com.episode6.hackit.deployable:deployable:0.2.5-SNAPSHOT'
  alsoUnderTest 'com.android.tools.build:gradle'
}

sourceSets {
  // an alternate reality version of the main sourceSet with the 
  // alsoUnderTest config included on the runtimeClasspath. 
  // This hack allows us to test our plugin along side other plugins
  // that aren't actually part of the build (but we want to ensure)
  // compatibility with.
  codeUnderTest {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.runtimeClasspath + configurations.alsoUnderTest
  }
}

gradlePlugin {
  pluginSourceSet sourceSets.codeUnderTest
}

// validate project dependencies that we can't use gdmc to resolve
task validateImplDeps(type: com.episode6.hackit.gdmc.task.GdmcValidateDepsTask) {
  dependencies = {
    configurations.implementation.dependencies
  }
}

test {
  testLogging {
    showStandardStreams = true
  }
  dependsOn validateImplDeps
}
