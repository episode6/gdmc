buildscript {
  ext {
    // Since this plugin implements itself, we must declare our compile dependencies on the classpath.
    // Define them here so we don't write them twice.
    compileDependencies = [
        'com.episode6.hackit.chop:chop-core:0.1.9',
        'com.episode6.hackit.chop:chop-groovy:0.1.9']
  }
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath 'com.episode6.hackit.deployable:deployable:0.1.7'
    classpath compileDependencies
  }
}

group = "com.episode6.hackit.gdmc"
version = "0.1.7"

repositories {
  jcenter()
  google()
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.episode6.hackit.deployable.jar'
apply plugin: 'com.episode6.hackit.deployable.addon.groovydocs'

GroovyScriptEngine scriptEngine = new GroovyScriptEngine([
    file('src/main/groovy').absolutePath,
    file('src/main/resources').absolutePath
].toArray(new String[2]),
    this.class.classLoader)
apply plugin: scriptEngine.loadScriptByName('com/episode6/hackit/gdmc/plugin/GdmcPlugin.groovy')

task wrapper(type: Wrapper) {
  gradleVersion = "4.1"
  distributionType = "all"
}

configurations {
  // A place for dependencies that must be placed in the pluginClasspath for testing
  // but do not need to be compile dependencies. (i.e. this is for plugins we need to
  // test for compatibility with)
  alsoUnderTest
}

dependencies {
  implementation localGroovy()
  implementation gradleApi()

  implementation compileDependencies

  testImplementation("org.spockframework:spock-core")  {
    exclude module: 'groovy-all'
  }
  testImplementation gradleTestKit()
  testImplementation 'com.episode6.hackit.groovykit:gk-files'
  testImplementation 'com.episode6.hackit.groovykit:gk-versions'

  alsoUnderTest 'com.episode6.hackit.deployable:deployable'
  alsoUnderTest 'com.android.tools.build:gradle'
}

// Add our alsoUnderTest dependencies to GradleRunner's plugin classpath
pluginUnderTestMetadata {
  pluginClasspath = pluginClasspath.plus(configurations.alsoUnderTest)
}

mavenDependencies {
  map configurations.alsoUnderTest, "test"
}

test {
  testLogging {
    showStandardStreams = true
  }
}
